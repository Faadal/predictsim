**** estimation ****
- ajouter un historique pour stocker les données
- faire une API:
class Predictor:
	__init__(max_procs, max_runtime)
	(exec on_job_submission) predict(job, current_time) => estimate_runtime
	(exec on_job_ending) fit(job, current_time)
-feature scaled stochastic gradient descent


**** simulateur ****
- faire une API pour easy_plus_plus, pouvoir changer le predictor en param:
class Predictor:
	__init__(max_procs, max_runtime)
	(exec on_job_submission) predict(job, current_time) => estimate_runtime
	(exec on_job_ending) fit(job, current_time)

-algos:
prévoir toutes les combinaisons:
priority list: FCFS
backfill: EASY, EASY+SJBF
correction:
	reqtime (assume reqtime if runtime >prediction),
	tsafrir(if runtime > prediction, then +1mn, +2mn,+5mn,+10mn.. cf papier),
	if runtime>prediction, then "99% of jobs are shorter than" value,
	"wait"(stop backfilling (and scheduling) as soon as "shadow" reservation is delayed)


**** workload ****
*recuperer les logs et formater(filtrer) pour expés:
-logs feitelson
-4 logs papier easy++
