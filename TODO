**** estimation ****
- ajouter un historique pour stocker les données
- utiliser l'API:class Predictor
- migrer les predictors vers cette API
-feature scaled stochastic gradient descent


**** simulateur ****
-ajouter un historique pour stocker les données
-feature scaled stochastic gradient descent (with regularization???)
- faire une API pour easy_plus_plus, pouvoir changer le predictor en param:
-changement de l'API á: Mon Jul 21 10:38:47 CEST 2014 cf. plus bas.
-> donc il faut ajouter ces paramètres en ligne de commande.
-> la vérification de leur pertinence pour un scheduler donné est la responsabilité du predictor.
-> dans ce cas il te suffit de passer les paramètres bêtement.

-algos:
prévoir toutes les combinaisons:
priority list: FCFS
backfill: EASY, EASY+SJBF
correction:
	reqtime (assume reqtime if runtime >prediction),
	tsafrir(if runtime > prediction, then +1mn, +2mn,+5mn,+10mn.. cf papier),
	if runtime>prediction, then "99% of jobs are shorter than" value,
	"wait"(stop backfilling (and scheduling) as soon as "shadow" reservation is delayed)

**** workload ****
*recuperer les logs et formater(filtrer) pour expés:
-logs feitelson
-4 logs papier easy++
*preparation des donnees:
filtrer runtime 0 -> runtime 1

**For reference:
API:
see predictor/predictor.py :)
